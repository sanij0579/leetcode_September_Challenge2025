3484. Design Spreadsheet
Solution: 

class Spreadsheet:
    def __init__(self, rows: int):
        self.rows = rows
        self.cells = {}  # store only modified cells, key = (col, row), value = int

    def _parse_cell(self, cell: str) -> tuple:
        """
        Convert cell like "A1" into (row, col).
        col -> int (0-based), row -> int (1-based)
        """
        col = ord(cell[0]) - ord('A')
        row = int(cell[1:])  # row starts at 1
        return (row, col)

    def setCell(self, cell: str, value: int) -> None:
        row, col = self._parse_cell(cell)
        self.cells[(row, col)] = value

    def resetCell(self, cell: str) -> None:
        row, col = self._parse_cell(cell)
        if (row, col) in self.cells:
            del self.cells[(row, col)]

    def _get_cell_value(self, cell: str) -> int:
        """
        Get value of a cell reference or integer.
        """
        if cell[0].isalpha():  # cell reference like "A1"
            row, col = self._parse_cell(cell)
            return self.cells.get((row, col), 0)
        else:  # number
            return int(cell)

    def getValue(self, formula: str) -> int:
        # formula format is always "=X+Y"
        parts = formula[1:].split("+")
        val1 = self._get_cell_value(parts[0])
        val2 = self._get_cell_value(parts[1])
        return val1 + val2
